{"version":3,"sources":["materials/index.js","redux/materials/index.js","redux/io/index.js","App.js","reducer.js","structures/storage/index.js","epic.js","redux/io/epics.js","store.js","index.js"],"names":["Materials","Blazing","Bright","Dark","Dense","Energy","Frost","Lightning","Lucid","Mythril","Power","Remembrance","Serenity","Tranquility","Twilight","Extra","getMaterials","reducer","createReducer","state","action","name","obj","payload","compose","evolve","not","when","propSatisfies","isNil","assoc","propOr","triggerMaterial","unaryActionCreator","loadMaterials","resetMaterials","nullaryActionCreator","savedState","loadState","useMaterials","useSelector","prop","MaterialList","materials","dispatch","useDispatch","useEffect","getMaterial","sets","map","group","key","type","value","id","checked","onChange","htmlFor","toPairs","className","Missing","items","material","filter","flatten","App","handleReset","style","marginBottom","href","margin","onClick","combineReducers","materialReducer","Storage","save","data","window","localStorage","setItem","JSON","stringify","load","parse","getItem","combineEpics","action$","pipe","ofType","state$","withLatestFrom","epicMiddleware","createEpicMiddleware","store","composeEnhancers","enhancers","createStore","applyMiddleware","run","epic","initStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.184edc20.chunk.js","sourcesContent":["const Materials = {\r\n    Blazing: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Bright: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Dark: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Dense: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Energy: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Frost: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Lightning: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Lucid: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Mythril: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Power: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Remembrance: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Serenity: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Tranquility: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Twilight: [\r\n        \"Shard\",\r\n        \"Stone\",\r\n        \"Gem\",\r\n        \"Crystal\"\r\n    ],\r\n    Extra: [\r\n        \"Manifest Illusion\",\r\n        \"Lost Illusion\",\r\n        \"Orichalcum\",\r\n        \"Orichalcum+\"\r\n    ]\r\n}\r\n\r\nexport const getMaterials = () => Materials;","import { nullaryActionCreator, unaryActionCreator, createReducer } from 'redux-utility'\r\nimport { evolve, not, when, propSatisfies, isNil, assoc, propOr, compose } from 'ramda';\r\n\r\nconst triggerProp = (name,obj) => compose(\r\n    evolve({ [name]: not }),\r\n    when(\r\n        propSatisfies(isNil,name),\r\n        assoc(name,false)\r\n    )\r\n)(obj)\r\n\r\nexport const TRIGGER_MATERIAL=\"kh/trigger-material\";\r\nexport const LOAD_MATERIALS = \"kh/load-materials\";\r\nexport const RESET_MATERIALS = \"kh/reset-materials\";\r\n\r\nconst reducer = createReducer({\r\n    [TRIGGER_MATERIAL]: (state,action) => {\r\n        const { payload } = action;\r\n        return triggerProp(payload,state);\r\n    },\r\n    [LOAD_MATERIALS]: (state,action) => {\r\n        return propOr({},\"payload\",action);\r\n    },\r\n    [RESET_MATERIALS]: () => ({})\r\n})\r\n\r\nexport default reducer\r\n\r\nexport const triggerMaterial = unaryActionCreator(TRIGGER_MATERIAL);\r\nexport const loadMaterials = unaryActionCreator(LOAD_MATERIALS);\r\nexport const resetMaterials = nullaryActionCreator(RESET_MATERIALS);","import { nullaryActionCreator } from 'redux-utility'\r\n\r\nexport const SAVED_STATE = \"kh/saved-state\";\r\nexport const LOAD_STATE = \"kh/load-state\";\r\n\r\nexport const savedState = nullaryActionCreator(SAVED_STATE)\r\nexport const loadState = nullaryActionCreator(LOAD_STATE)","import React, { useEffect } from 'react';\r\nimport { map, filter, toPairs, prop, propOr, flatten } from 'ramda'\r\nimport { getMaterials } from './materials';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { triggerMaterial, resetMaterials } from './redux/materials';\r\nimport { loadState } from './redux/io';\r\nimport { compose } from 'redux';\r\nimport \"./App.css\"\r\n\r\nconst useMaterials = () => useSelector(prop(\"materials\"))\r\n\r\nconst MaterialList = () => {\r\n  const materials = useMaterials();\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(loadState())\r\n  },[dispatch])\r\n\r\n  const getMaterial = name => propOr(false,name,materials);\r\n  \r\n  const sets = map(([name,group]) => {\r\n    return <fieldset key={name}>\r\n      <legend>{name}</legend>\r\n      {\r\n        group.map(type => {\r\n          const value = name === \"Extra\" ? type : `${name} ${type}`\r\n          const handleChange = () => {\r\n            dispatch(triggerMaterial(value));\r\n          }\r\n          return <div key={value}>\r\n            <input \r\n              id={value} \r\n              type=\"checkbox\" \r\n              checked={getMaterial(value)}\r\n              onChange={handleChange}\r\n            />\r\n            <label htmlFor={value}>{value}</label>\r\n          </div>\r\n        })\r\n      }\r\n    </fieldset>\r\n  })(toPairs(getMaterials()))\r\n  return <div className=\"container\">\r\n    {sets}\r\n  </div>\r\n}\r\n\r\nconst Missing = () => {\r\n  const materials = useMaterials();\r\n  const items = compose(\r\n    map((material) => <li key={material}>{material}</li>),\r\n    map(prop(0)),\r\n    filter(([name,flag]) => !flag),\r\n    map(material => [material, propOr(false,material,materials)]),\r\n    flatten,\r\n    map(([name,group]) => {\r\n      return group.map(type => name === \"Extra\" ? type : `${name} ${type}`)\r\n    }),\r\n    toPairs\r\n  )(getMaterials());\r\n  return <div>\r\n    <h1>Missing Materials</h1>\r\n    <ul>\r\n      {items}\r\n    </ul>\r\n  </div>\r\n}\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch()\r\n  const handleReset = compose( dispatch, resetMaterials );\r\n  return (\r\n    <div>\r\n      <h1>Kingdom Hearts 2 Final Mix Materials</h1>\r\n      <div style={{ marginBottom: \"16px\" }}>\r\n        For info on how to find materials go to <a href=\"https://kingdomhearts.fandom.com/wiki/List_of_Synthesis_Materials\">KH2 Wiki</a>\r\n      </div>\r\n      <MaterialList />\r\n      <div style={{ margin: \"16px\"}}>\r\n        <button onClick={handleReset}>Reset Progress</button>\r\n      </div>\r\n      <Missing />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from \"redux\";\r\nimport materialReducer from './redux/materials'\r\n\r\nexport default combineReducers({\r\n    materials: materialReducer\r\n})","const key = \"may your heart be your guiding key\";\r\n\r\nconst Storage = {\r\n    save(data){\r\n        window.localStorage.setItem(key,JSON.stringify(data))\r\n    },\r\n    load(){\r\n        return JSON.parse(window.localStorage.getItem(key))\r\n    }\r\n}\r\n\r\nexport default Storage","import { combineEpics } from \"redux-observable\";\r\nimport { loadEpic, saveEpic } from \"./redux/io/epics\";\r\n\r\nexport default combineEpics(\r\n    loadEpic,\r\n    saveEpic,\r\n)","import { map, withLatestFrom } from 'rxjs/operators'\r\nimport { ofType } from \"redux-observable\";\r\nimport { TRIGGER_MATERIAL, loadMaterials, RESET_MATERIALS } from '../materials';\r\nimport { LOAD_STATE, savedState } from '.';\r\nimport { prop, compose } from 'ramda';\r\nimport Storage from '../../structures/storage';\r\n\r\nexport const loadEpic = action$ => action$.pipe(\r\n    ofType(LOAD_STATE),\r\n    map(Storage.load),\r\n    map(compose(loadMaterials, prop(\"materials\")))\r\n)\r\n\r\nexport const saveEpic = (action$,state$) => action$.pipe(\r\n    ofType(TRIGGER_MATERIAL,RESET_MATERIALS),\r\n    withLatestFrom(state$),\r\n    map(([,state]) => Storage.save(state)),\r\n    map(savedState)\r\n)","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { createEpicMiddleware } from 'redux-observable';\r\nimport reducer from './reducer';\r\nimport epic from './epic';\r\n\r\nconst epicMiddleware = createEpicMiddleware()\r\n\r\nexport const initStore = () => {\r\n    const composeEnhancers = \r\n        process.env.NODE_ENV === \"development\" ? \r\n            window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose : \r\n            compose;\r\n\r\n    const enhancers = [\r\n        epicMiddleware,\r\n    ]\r\n    \r\n    const store = createStore(\r\n        reducer,\r\n        {},\r\n        composeEnhancers(\r\n            applyMiddleware(...enhancers)\r\n        )\r\n    )\r\n\r\n    epicMiddleware.run(epic);\r\n\r\n    return store\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { initStore } from './store'\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = initStore()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}